<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe Game</title>
    <style>
        /* Basic Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #f3f4f7;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            color: #333;
        }

        h1 {
            margin-bottom: 20px;
            font-size: 2.5em;
            color: #333;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin-bottom: 20px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            font-weight: bold;
            border: 2px solid #333;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .cell.clicked {
            pointer-events: none;
        }

        .cell.winner {
            background-color: #ffeb3b; /* Yellow background for winning cells */
        }

        .status {
            font-size: 1.5em;
            margin-bottom: 20px;
        }

        .reset-button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            font-size: 1.2em;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .reset-button:hover {
            background-color: #45a049;
        }

        .winner {
            color: #4CAF50;
        }

        .game-over {
            color: #f44336;
        }
    </style>
</head>
<body>

    <h1>Tic-Tac-Toe</h1>
    <div class="status" id="status">Player X's turn</div>
    <div class="game-board" id="board">
        <!-- 9 cells will be dynamically generated here -->
    </div>
    <button class="reset-button" id="resetButton">Restart Game</button>

    <script>
        const board = document.getElementById("board");
        const status = document.getElementById("status");
        const resetButton = document.getElementById("resetButton");

        let currentPlayer = "X";
        let gameBoard = ["", "", "", "", "", "", "", "", ""]; // Keeps track of the cells
        let gameActive = true; // To check if the game is still ongoing
        let winningCells = []; // To store winning cells

        // Function to render the board
        function renderBoard() {
            board.innerHTML = "";
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement("div");
                cell.classList.add("cell");
                cell.textContent = gameBoard[i];
                cell.setAttribute("data-index", i);
                cell.addEventListener("click", handleCellClick);
                if (gameBoard[i]) {
                    cell.classList.add("clicked");
                }
                if (winningCells.includes(i)) {
                    cell.classList.add("winner");
                }
                board.appendChild(cell);
            }
        }

        // Function to handle cell click
        function handleCellClick(event) {
            const index = event.target.getAttribute("data-index");
            if (gameBoard[index] || !gameActive) return; // Do nothing if cell is already clicked or game is over

            // Mark the cell with the current player's symbol
            gameBoard[index] = currentPlayer;
            renderBoard();
            checkWinner();
            currentPlayer = currentPlayer === "X" ? "O" : "X"; // Switch player
            status.textContent = `Player ${currentPlayer}'s turn`;
        }

        // Function to check if someone has won
        function checkWinner() {
            const winPatterns = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // Horizontal
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // Vertical
                [0, 4, 8], [2, 4, 6]              // Diagonal
            ];

            for (const pattern of winPatterns) {
                const [a, b, c] = pattern;
                if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
                    status.textContent = `Player ${gameBoard[a]} wins!`;
                    status.classList.add("winner");
                    winningCells = [a, b, c]; // Highlight the winning cells
                    gameActive = false;
                    renderBoard(); // Re-render board to show the winning cells
                    return;
                }
            }

            if (!gameBoard.includes("")) {
                status.textContent = "It's a draw!";
                status.classList.add("game-over");
                gameActive = false;
            }
        }

        // Function to reset the game
        function resetGame() {
            gameBoard = ["", "", "", "", "", "", "", "", ""];
            currentPlayer = "X";
            gameActive = true;
            winningCells = [];
            status.textContent = "Player X's turn";
            status.classList.remove("winner", "game-over");
            renderBoard();
        }

        // Event listener to reset the game
        resetButton.addEventListener("click", resetGame);

        // Initialize the game
        renderBoard();
    </script>

</body>
</html>
