<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stylish Stopwatch</title>
    <style>
        /* Basic Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1d2671, #c33764); /* Gradient background */
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: #fff;
            overflow: hidden;
            font-size: 16px;
        }

        .stopwatch-container {
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 30px 40px;
            text-align: center;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            width: 300px;
            margin: auto;
        }

        .time-display {
            font-size: 4em;
            font-weight: bold;
            margin-bottom: 30px;
            letter-spacing: 2px;
        }

        .controls button {
            background-color: #ff6f61; /* Soft red for primary buttons */
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            margin: 10px;
            font-size: 1.1em;
            cursor: pointer;
            color: white;
            transition: all 0.3s ease;
            width: 120px;
        }

        .controls button:hover {
            background-color: #ff3b2f; /* Darker red on hover */
            transform: scale(1.1);
        }

        .controls button:disabled {
            background-color: #aaa;
            cursor: not-allowed;
        }

        .laps {
            margin-top: 20px;
            text-align: left;
        }

        .laps h3 {
            color: #ff6f61;
            font-size: 1.2em;
            margin-bottom: 15px;
        }

        .laps ul {
            list-style-type: none;
            padding: 0;
        }

        .laps li {
            background-color: rgba(255, 255, 255, 0.2);
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            font-size: 1em;
            color: white;
            display: flex;
            justify-content: space-between;
        }

        .laps li span {
            font-weight: bold;
            color: #ffb86c; /* Soft gold color for lap time text */
        }
    </style>
</head>
<body>

    <div class="stopwatch-container">
        <div class="time-display" id="display">00:00:00</div>

        <div class="controls">
            <button id="startStopButton">Start</button>
            <button id="resetButton" disabled>Reset</button>
            <button id="lapButton" disabled>Lap</button>
        </div>

        <div class="laps">
            <h3>Laps:</h3>
            <ul id="lapList"></ul>
        </div>
    </div>

    <script>
        let timer;
        let isRunning = false;
        let seconds = 0;
        let minutes = 0;
        let hours = 0;
        let lapCount = 1;

        const display = document.getElementById('display');
        const startStopButton = document.getElementById('startStopButton');
        const resetButton = document.getElementById('resetButton');
        const lapButton = document.getElementById('lapButton');
        const lapList = document.getElementById('lapList');

        // Function to update the time display
        function updateDisplay() {
            const formattedTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            display.textContent = formattedTime;
        }

        // Function to start or stop the timer
        function toggleTimer() {
            if (isRunning) {
                clearInterval(timer);
                startStopButton.textContent = 'Start';
            } else {
                timer = setInterval(function() {
                    seconds++;
                    if (seconds >= 60) {
                        seconds = 0;
                        minutes++;
                        if (minutes >= 60) {
                            minutes = 0;
                            hours++;
                        }
                    }
                    updateDisplay();
                }, 1000);
                startStopButton.textContent = 'Pause';
            }
            isRunning = !isRunning;
            resetButton.disabled = !isRunning;
            lapButton.disabled = !isRunning;
        }

        // Function to reset the timer
        function resetTimer() {
            clearInterval(timer);
            isRunning = false;
            hours = 0;
            minutes = 0;
            seconds = 0;
            updateDisplay();
            startStopButton.textContent = 'Start';
            resetButton.disabled = true;
            lapButton.disabled = true;
            lapList.innerHTML = '';
            lapCount = 1;
        }

        // Function to record a lap
        function recordLap() {
            const lapTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            const lapItem = document.createElement('li');
            lapItem.innerHTML = `Lap ${lapCount}: <span>${lapTime}</span>`;
            lapList.appendChild(lapItem);
            lapCount++;
        }

        // Event listeners for buttons
        startStopButton.addEventListener('click', toggleTimer);
        resetButton.addEventListener('click', resetTimer);
        lapButton.addEventListener('click', recordLap);
    </script>

</body>
</html>
